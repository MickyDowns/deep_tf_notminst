{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "D7tqLMoKF6uq"
   },
   "source": [
    "Deep Learning\n",
    "=============\n",
    "\n",
    "Assignment 5\n",
    "------------\n",
    "\n",
    "The goal of this assignment is to train a Word2Vec skip-gram model over [Text8](http://mattmahoney.net/dc/textdata) data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     }
    },
    "colab_type": "code",
    "collapsed": false,
    "id": "0K1ZyLn04QZf"
   },
   "outputs": [],
   "source": [
    "# These are all the modules we'll be using later. Make sure you can import them\n",
    "# before proceeding further.\n",
    "from __future__ import print_function\n",
    "import collections\n",
    "import math\n",
    "import numpy as np\n",
    "import os\n",
    "import random\n",
    "import tensorflow as tf\n",
    "import zipfile\n",
    "from matplotlib import pylab\n",
    "from six.moves import range\n",
    "from six.moves.urllib.request import urlretrieve\n",
    "from sklearn.manifold import TSNE"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "aCjPJE944bkV"
   },
   "source": [
    "Download the data from the source website if necessary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     },
     "output_extras": [
      {
       "item_id": 1
      }
     ]
    },
    "colab_type": "code",
    "collapsed": false,
    "executionInfo": {
     "elapsed": 14640,
     "status": "ok",
     "timestamp": 1445964482948,
     "user": {
      "color": "#1FA15D",
      "displayName": "Vincent Vanhoucke",
      "isAnonymous": false,
      "isMe": true,
      "permissionId": "05076109866853157986",
      "photoUrl": "//lh6.googleusercontent.com/-cCJa7dTDcgQ/AAAAAAAAAAI/AAAAAAAACgw/r2EZ_8oYer4/s50-c-k-no/photo.jpg",
      "sessionId": "2f1ffade4c9f20de",
      "userId": "102167687554210253930"
     },
     "user_tz": 420
    },
    "id": "RJ-o3UBUFtCw",
    "outputId": "c4ec222c-80b5-4298-e635-93ca9f79c3b7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found and verified text8.zip\n"
     ]
    }
   ],
   "source": [
    "url = 'http://mattmahoney.net/dc/'\n",
    "\n",
    "def maybe_download(filename, expected_bytes):\n",
    "    \"\"\"Download a file if not present, and make sure it's the right size.\"\"\"\n",
    "    if not os.path.exists(filename):\n",
    "        filename, _ = urlretrieve(url + filename, filename)\n",
    "    statinfo = os.stat(filename)\n",
    "    if statinfo.st_size == expected_bytes:\n",
    "        print('Found and verified %s' % filename)\n",
    "    else:\n",
    "        print(statinfo.st_size)\n",
    "        raise Exception('Failed to verify ' + filename + '. Can you get to it with a browser?')\n",
    "    return filename\n",
    "\n",
    "filename = maybe_download('text8.zip', 31344016)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Zqz3XiqI4mZT"
   },
   "source": [
    "Read the data into a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     },
     "output_extras": [
      {
       "item_id": 1
      }
     ]
    },
    "colab_type": "code",
    "collapsed": false,
    "executionInfo": {
     "elapsed": 28844,
     "status": "ok",
     "timestamp": 1445964497165,
     "user": {
      "color": "#1FA15D",
      "displayName": "Vincent Vanhoucke",
      "isAnonymous": false,
      "isMe": true,
      "permissionId": "05076109866853157986",
      "photoUrl": "//lh6.googleusercontent.com/-cCJa7dTDcgQ/AAAAAAAAAAI/AAAAAAAACgw/r2EZ_8oYer4/s50-c-k-no/photo.jpg",
      "sessionId": "2f1ffade4c9f20de",
      "userId": "102167687554210253930"
     },
     "user_tz": 420
    },
    "id": "Mvf09fjugFU_",
    "outputId": "e3a928b4-1645-4fe8-be17-fcf47de5716d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Data size 17005207\n"
     ]
    }
   ],
   "source": [
    "def read_data(filename):\n",
    "    \"\"\"Extract the first file enclosed in a zip file as a list of words\"\"\"\n",
    "    with zipfile.ZipFile(filename) as f:\n",
    "        data = tf.compat.as_str(f.read(f.namelist()[0])).split()\n",
    "    return data\n",
    "  \n",
    "words = read_data(filename)\n",
    "print('Data size %d' % len(words))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['of', 'and', 'one', 'in', 'a', 'to', 'zero', 'nine', 'two']"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "words[1:10]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Zdw6i4F8glpp"
   },
   "source": [
    "Build the dictionary and replace rare words with UNK token."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     },
     "output_extras": [
      {
       "item_id": 1
      }
     ]
    },
    "colab_type": "code",
    "collapsed": false,
    "executionInfo": {
     "elapsed": 28849,
     "status": "ok",
     "timestamp": 1445964497178,
     "user": {
      "color": "#1FA15D",
      "displayName": "Vincent Vanhoucke",
      "isAnonymous": false,
      "isMe": true,
      "permissionId": "05076109866853157986",
      "photoUrl": "//lh6.googleusercontent.com/-cCJa7dTDcgQ/AAAAAAAAAAI/AAAAAAAACgw/r2EZ_8oYer4/s50-c-k-no/photo.jpg",
      "sessionId": "2f1ffade4c9f20de",
      "userId": "102167687554210253930"
     },
     "user_tz": 420
    },
    "id": "gAL1EECXeZsD",
    "outputId": "3fb4ecd1-df67-44b6-a2dc-2291730970b2"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most common words (+UNK) [['UNK', 418391], ('the', 1061396), ('of', 593677), ('and', 416629), ('one', 411764)]\n",
      "Sample data [5239, 3084, 12, 6, 195, 2, 3137, 46, 59, 156]\n"
     ]
    }
   ],
   "source": [
    "vocabulary_size = 50000\n",
    "\n",
    "def build_dataset(words):\n",
    "    count = [['UNK', -1]] # creating a vector of tuples associating word with its count\n",
    "    count.extend(collections.Counter(words).most_common(vocabulary_size - 1))\n",
    "    # this is using \"collections\" class to count occurrances of each word and order greatest to least.\n",
    "    # collections is a \"high performance\" data type (as opposed to \"built-in\" containders like dict, list, tuple)\n",
    "    # so, count ends up being the most frequently occurring 50k words in decreasing order of occurrence. \n",
    "    \n",
    "    dictionary = dict() # creating an empty dictionary ready to store key-value pair\n",
    "    for word, _ in count: # working from most common to least\n",
    "        dictionary[word] = len(dictionary) # adding words to dictionary using word as key and counter as value\n",
    "    # dictionary ends up being a list of tuples indexed by the word w/ value = rank ordinal of occurrence\n",
    "    \n",
    "    data = list()\n",
    "    unk_count = 0\n",
    "    for word in words:\n",
    "        if word in dictionary: # now, running back through original list of words\n",
    "            index = dictionary[word] # creating index entry cross referencing input word to its dictionary entry\n",
    "        else:\n",
    "            index = 0  # dictionary['UNK']\n",
    "            unk_count = unk_count + 1\n",
    "        data.append(index)\n",
    "        # data ends up being string of numeric index values 1 for each word in original words input file\n",
    "        # each data value (index integer value) represents the commonness of the word w/ 1 being most common\n",
    "        # finally, for words < 50,0000 commonness rank, their index is 0 (total of 419k)\n",
    "        \n",
    "    count[0][1] = unk_count\n",
    "    reverse_dictionary = dict(zip(dictionary.values(), dictionary.keys())) \n",
    "    # swapping dictionary key and value columns so that the number becomes the key and the word becomes the value\n",
    "    return data, count, dictionary, reverse_dictionary\n",
    "\n",
    "data, count, dictionary, reverse_dictionary = build_dataset(words)\n",
    "# so, the dataset is a list including:\n",
    "#  1. data: numeric representation of \"words\" file\n",
    "#  2. count: the words and their frequency of occurrance sorted by frequency\n",
    "#  3. dictionary: \"word\" as key, ordinal for frequency of occurrance as value\n",
    "#  4. reverse dictionary: ordinal for foo as key and word as value\n",
    "\n",
    "print('Most common words (+UNK)', count[:5])\n",
    "print('Sample data', data[:10])\n",
    "del words  # Hint to reduce memory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('the', 1061396), ('of', 593677), ('and', 416629), ('one', 411764), ('in', 372201), ('a', 325873), ('to', 316376), ('zero', 264975), ('nine', 250430)]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(count[1:10])\n",
    "dictionary['of']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://docs.python.org/2/library/collections.html\n",
    "\n",
    "class collections.Counter([iterable-or-mapping])\n",
    "A Counter is a dict subclass for counting hashable objects. It is an unordered collection where elements are stored as dictionary keys and their counts are stored as dictionary values. Counts are allowed to be any integer value including zero or negative counts. The Counter class is similar to bags or multisets in other languages.\n",
    "\n",
    "Elements are counted from an iterable or initialized from another mapping (or counter):\n",
    ">>> c = Counter()                           # a new, empty counter\n",
    ">>> c = Counter('gallahad')                 # a new counter from an iterable\n",
    ">>> c = Counter({'red': 4, 'blue': 2})      # a new counter from a mapping\n",
    ">>> c = Counter(cats=4, dogs=8)             # a new counter from keyword args\n",
    "\n",
    "Counter objects have a dictionary interface except that they return a zero count for missing items instead of raising a KeyError:\n",
    ">>> c = Counter(['eggs', 'ham'])\n",
    ">>> c['bacon']                              # count of a missing element is zero\n",
    "0\n",
    "\n",
    "Setting a count to zero does not remove an element from a counter. Use del to remove it entirely:\n",
    ">>> c['sausage'] = 0                        # counter entry with a zero count\n",
    ">>> del c['sausage']                        # del actually removes the entry\n",
    "\n",
    "most_common([n])\n",
    "Return a list of the n most common elements and their counts from the most common to the least. If n is omitted or None, most_common() returns all elements in the counter. Elements with equal counts are ordered arbitrarily:\n",
    ">>> Counter('abracadabra').most_common(3)\n",
    "[('a', 5), ('r', 2), ('b', 2)]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "lFwoyygOmWsL"
   },
   "source": [
    "Function to generate a training batch for the skip-gram model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     },
     "output_extras": [
      {
       "item_id": 1
      }
     ]
    },
    "colab_type": "code",
    "collapsed": false,
    "executionInfo": {
     "elapsed": 113,
     "status": "ok",
     "timestamp": 1445964901989,
     "user": {
      "color": "#1FA15D",
      "displayName": "Vincent Vanhoucke",
      "isAnonymous": false,
      "isMe": true,
      "permissionId": "05076109866853157986",
      "photoUrl": "//lh6.googleusercontent.com/-cCJa7dTDcgQ/AAAAAAAAAAI/AAAAAAAACgw/r2EZ_8oYer4/s50-c-k-no/photo.jpg",
      "sessionId": "2f1ffade4c9f20de",
      "userId": "102167687554210253930"
     },
     "user_tz": 420
    },
    "id": "w9APjA-zmfjV",
    "outputId": "67cccb02-cdaf-4e47-d489-43bcc8d57bb8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "data: ['anarchism', 'originated', 'as', 'a', 'term', 'of', 'abuse', 'first']\n",
      "\n",
      "with num_skips = 2 and skip_window = 1:\n",
      "    batch: ['originated', 'originated', 'as', 'as', 'a', 'a', 'term', 'term']\n",
      "    labels: ['as', 'anarchism', 'originated', 'a', 'as', 'term', 'of', 'a']\n",
      "\n",
      "with num_skips = 4 and skip_window = 2:\n",
      "    batch: ['as', 'as', 'as', 'as', 'a', 'a', 'a', 'a']\n",
      "    labels: ['a', 'term', 'anarchism', 'originated', 'as', 'of', 'originated', 'term']\n"
     ]
    }
   ],
   "source": [
    "data_index = 0\n",
    "\n",
    "def generate_batch(batch_size, num_skips, skip_window):\n",
    "  global data_index\n",
    "  assert batch_size % num_skips == 0\n",
    "  assert num_skips <= 2 * skip_window\n",
    "  batch = np.ndarray(shape=(batch_size), dtype=np.int32)\n",
    "  labels = np.ndarray(shape=(batch_size, 1), dtype=np.int32)\n",
    "  span = 2 * skip_window + 1 # [ skip_window target skip_window ]\n",
    "  buffer = collections.deque(maxlen=span)\n",
    "  for _ in range(span):\n",
    "    buffer.append(data[data_index])\n",
    "    data_index = (data_index + 1) % len(data)\n",
    "  for i in range(batch_size // num_skips):\n",
    "    target = skip_window  # target label at the center of the buffer\n",
    "    targets_to_avoid = [ skip_window ]\n",
    "    for j in range(num_skips):\n",
    "      while target in targets_to_avoid:\n",
    "        target = random.randint(0, span - 1)\n",
    "      targets_to_avoid.append(target)\n",
    "      batch[i * num_skips + j] = buffer[skip_window]\n",
    "      labels[i * num_skips + j, 0] = buffer[target]\n",
    "    buffer.append(data[data_index])\n",
    "    data_index = (data_index + 1) % len(data)\n",
    "  return batch, labels\n",
    "\n",
    "print('data:', [reverse_dictionary[di] for di in data[:8]])\n",
    "\n",
    "for num_skips, skip_window in [(2, 1), (4, 2)]:\n",
    "    data_index = 0\n",
    "    batch, labels = generate_batch(batch_size=8, num_skips=num_skips, skip_window=skip_window)\n",
    "    print('\\nwith num_skips = %d and skip_window = %d:' % (num_skips, skip_window))\n",
    "    print('    batch:', [reverse_dictionary[bi] for bi in batch])\n",
    "    print('    labels:', [reverse_dictionary[li] for li in labels.reshape(8)])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What are the continuous bag of words and skip-gram architectures, in layman's terms?\n",
    "\n",
    "Both architectures describe how the neural network \"learns\" the underlying word representations for each word. Since learning word representations is essentially unsupervised, you need some way to \"create\" labels to train the model. Skip-gram and CBOW are two ways of creating the \"task\" for the neural network -- you can think of this as the output layer of the neural network, where we create \"labels\" for the given input (which depends on the architecture).\n",
    "\n",
    "For both descriptions below, we assume that the current word in a sentence is wi.\n",
    "\n",
    "Skip-gram: The input to the model is wi, and the output could be wi−1,wi−2,wi+1,wi+2. So the task here is \"predicting the context given a word\". Also, the context is not limited to its immediate context, training instances can be created by skipping a constant number of words in its context, so for example, wi−3,wi−4,wi+3,wi+4, hence the name skip-gram. Note that the window size determines how far forward and backward to look for context words to predict.\n",
    "\n",
    "CBOW: The input to the model could be wi−2,wi−1,wi+1,wi+2, the preceding and following words of the current word we are at. The output of the neural network will be wi. Hence you can think of the task as \"predicting the word given its context\". Note that the number of words we use depends on your setting for the window size.\n",
    "\n",
    "According to Mikolov:\n",
    "Skip-gram: works well with small amount of the training data, represents well even rare words or phrases.\n",
    "\n",
    "CBOW: several times faster to train than the skip-gram, slightly better accuracy for the frequent words\n",
    "\n",
    "This can get even a bit more complicated if you consider that there are two different ways how to train the models: the normalized hierarchical softmax, and the un-normalized negative sampling. Both work quite differently.\n",
    "which makes sense since with skip gram, you can create a lot more training instances from limited amount of data, and for CBOW, you will need more since you are conditioning on context, which can get exponentially huge.\n",
    "\n",
    "https://www.quora.com/What-are-the-continuous-bag-of-words-and-skip-gram-architectures-in-laymans-terms"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ofd1MbBuwiva"
   },
   "source": [
    "Train a skip-gram model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     }
    },
    "colab_type": "code",
    "collapsed": true,
    "id": "8pQKsV4Vwlzy"
   },
   "outputs": [],
   "source": [
    "batch_size = 128\n",
    "embedding_size = 128 # Dimension of the embedding vector.\n",
    "skip_window = 1 # How many words to consider left and right.\n",
    "num_skips = 2 # How many times to reuse an input to generate a label.\n",
    "# We pick a random validation set to sample nearest neighbors. here we limit the\n",
    "# validation samples to the words that have a low numeric ID, which by\n",
    "# construction are also the most frequent. \n",
    "valid_size = 16 # Random set of words to evaluate similarity on.\n",
    "valid_window = 100 # Only pick dev samples in the head of the distribution.\n",
    "valid_examples = np.array(random.sample(range(valid_window), valid_size))\n",
    "num_sampled = 64 # Number of negative examples to sample.\n",
    "\n",
    "graph = tf.Graph()\n",
    "\n",
    "with graph.as_default(), tf.device('/cpu:0'):\n",
    "\n",
    "  # Input data.\n",
    "  train_dataset = tf.placeholder(tf.int32, shape=[batch_size])\n",
    "  train_labels = tf.placeholder(tf.int32, shape=[batch_size, 1])\n",
    "  valid_dataset = tf.constant(valid_examples, dtype=tf.int32)\n",
    "  \n",
    "  # Variables.\n",
    "  embeddings = tf.Variable(\n",
    "    tf.random_uniform([vocabulary_size, embedding_size], -1.0, 1.0))\n",
    "  softmax_weights = tf.Variable(\n",
    "    tf.truncated_normal([vocabulary_size, embedding_size],\n",
    "                         stddev=1.0 / math.sqrt(embedding_size)))\n",
    "  softmax_biases = tf.Variable(tf.zeros([vocabulary_size]))\n",
    "  \n",
    "  # Model.\n",
    "  # Look up embeddings for inputs.\n",
    "  embed = tf.nn.embedding_lookup(embeddings, train_dataset)\n",
    "  # Compute the softmax loss, using a sample of the negative labels each time.\n",
    "  loss = tf.reduce_mean(\n",
    "    tf.nn.sampled_softmax_loss(softmax_weights, softmax_biases, embed,\n",
    "                               train_labels, num_sampled, vocabulary_size))\n",
    "\n",
    "  # Optimizer.\n",
    "  optimizer = tf.train.AdagradOptimizer(1.0).minimize(loss)\n",
    "  \n",
    "  # Compute the similarity between minibatch examples and all embeddings.\n",
    "  # We use the cosine distance:\n",
    "  norm = tf.sqrt(tf.reduce_sum(tf.square(embeddings), 1, keep_dims=True))\n",
    "  normalized_embeddings = embeddings / norm\n",
    "  valid_embeddings = tf.nn.embedding_lookup(\n",
    "    normalized_embeddings, valid_dataset)\n",
    "  similarity = tf.matmul(valid_embeddings, tf.transpose(normalized_embeddings))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     },
     "output_extras": [
      {
       "item_id": 23
      },
      {
       "item_id": 48
      },
      {
       "item_id": 61
      }
     ]
    },
    "colab_type": "code",
    "collapsed": false,
    "executionInfo": {
     "elapsed": 436189,
     "status": "ok",
     "timestamp": 1445965429787,
     "user": {
      "color": "#1FA15D",
      "displayName": "Vincent Vanhoucke",
      "isAnonymous": false,
      "isMe": true,
      "permissionId": "05076109866853157986",
      "photoUrl": "//lh6.googleusercontent.com/-cCJa7dTDcgQ/AAAAAAAAAAI/AAAAAAAACgw/r2EZ_8oYer4/s50-c-k-no/photo.jpg",
      "sessionId": "2f1ffade4c9f20de",
      "userId": "102167687554210253930"
     },
     "user_tz": 420
    },
    "id": "1bQFGceBxrWW",
    "outputId": "5ebd6d9a-33c6-4bcd-bf6d-252b0b6055e4"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initialized\n",
      "Average loss at step 0: 8.052840\n",
      "Nearest to new: capillaries, isi, allis, pint, azzam, eine, folders, nger,\n",
      "Nearest to more: both, counterintelligence, anything, shimizu, salad, epinephrine, benchers, chiang,\n",
      "Nearest to were: bodleian, erupt, loci, dystopian, restructured, tribunes, deirdre, talmadge,\n",
      "Nearest to to: stanford, cholas, fragile, beatified, tunis, hingis, pensacola, heorot,\n",
      "Nearest to two: snoopy, doesburg, pyramidal, sabine, ensure, imperfective, brodsky, realign,\n",
      "Nearest to american: atta, obsessed, cosmetics, muad, stormy, reestablishment, scriptores, rann,\n",
      "Nearest to he: polluted, drifting, capac, anions, zoster, spectator, ivanov, priests,\n",
      "Nearest to war: intoxication, deadly, persecuting, timeout, tourist, hump, assemblers, asch,\n",
      "Nearest to state: link, satie, philips, blocking, insensible, cosmonauts, cvd, set,\n",
      "Nearest to who: coordinates, vein, repulse, fabricius, windows, ornithologist, synchronicity, redrawn,\n",
      "Nearest to is: djs, autograph, stamford, synth, jannaeus, amsterdam, statute, microchips,\n",
      "Nearest to d: obtainable, irian, roque, mummies, stalking, exempt, hugo, mahler,\n",
      "Nearest to after: gneiss, quiver, hourly, falsity, lcms, muskegon, reg, parting,\n",
      "Nearest to nine: finnegan, eliyahu, elway, wharton, east, fecture, reviewer, highway,\n",
      "Nearest to and: rembrandt, vigilantes, halter, splendor, pedestal, concentrated, enough, misgivings,\n",
      "Nearest to there: ethiopians, invertible, shiga, dough, submerged, confidant, sacco, cumann,\n",
      "Average loss at step 2000: 4.357135\n",
      "Average loss at step 4000: 3.868378\n",
      "Average loss at step 6000: 3.784934\n",
      "Average loss at step 8000: 3.688304\n",
      "Average loss at step 10000: 3.609254\n",
      "Nearest to new: isi, cdc, capillaries, charred, portmanteaus, allis, folders, relocate,\n",
      "Nearest to more: counterintelligence, augustin, deductive, both, freddy, ndnis, catwoman, visualizing,\n",
      "Nearest to were: are, was, loci, erupt, flatten, be, kapoor, avenida,\n",
      "Nearest to to: destiny, not, busting, would, velocity, moabites, shari, septuagint,\n",
      "Nearest to two: three, four, five, eight, six, seven, nine, zero,\n",
      "Nearest to american: fellow, tyre, invasive, tyrosine, dignities, atta, floss, villa,\n",
      "Nearest to he: it, they, she, who, there, also, widely, conjunction,\n",
      "Nearest to war: hump, tallest, timeout, savant, tourist, primetime, persecuting, functions,\n",
      "Nearest to state: set, link, name, satie, domesday, ostrich, inklings, slavery,\n",
      "Nearest to who: he, which, and, jong, shovel, they, flaminius, she,\n",
      "Nearest to is: was, are, has, be, traits, by, soaking, nippur,\n",
      "Nearest to d: obtainable, exempt, and, roque, emanates, panhandle, republik, walkway,\n",
      "Nearest to after: lcms, before, mentions, liturgical, infielder, trouser, gauntlet, furs,\n",
      "Nearest to nine: eight, six, seven, five, zero, four, three, two,\n",
      "Nearest to and: or, s, unreleased, d, who, for, in, of,\n",
      "Nearest to there: it, he, they, which, often, shiga, no, cumann,\n",
      "Average loss at step 12000: 3.607475\n",
      "Average loss at step 14000: 3.569810\n",
      "Average loss at step 16000: 3.410005\n",
      "Average loss at step 18000: 3.458213\n",
      "Average loss at step 20000: 3.538619\n",
      "Nearest to new: charred, cdc, relocate, damietta, kandinsky, nica, folders, unstructured,\n",
      "Nearest to more: less, most, freddy, counterintelligence, wick, ndnis, lleida, sunshine,\n",
      "Nearest to were: are, was, have, had, is, be, flatten, by,\n",
      "Nearest to to: would, will, could, not, bioinformatics, legally, may, plugging,\n",
      "Nearest to two: three, four, five, six, seven, eight, one, zero,\n",
      "Nearest to american: british, austrian, russian, nepalese, fellow, huangdi, and, floss,\n",
      "Nearest to he: it, she, they, who, there, then, which, alternately,\n",
      "Nearest to war: hump, tourist, primetime, tallest, persecuting, unleashed, savant, timeout,\n",
      "Nearest to state: set, gatsby, slavery, city, kora, domesday, linger, link,\n",
      "Nearest to who: he, which, they, often, she, also, there, jong,\n",
      "Nearest to is: was, are, has, were, be, became, forelimbs, but,\n",
      "Nearest to d: b, obtainable, italian, exempt, ann, panhandle, collector, walkway,\n",
      "Nearest to after: before, when, lcms, gauntlet, during, but, by, liturgical,\n",
      "Nearest to nine: eight, seven, six, four, five, three, zero, two,\n",
      "Nearest to and: or, but, barracuda, at, for, european, in, american,\n",
      "Nearest to there: it, they, he, which, often, who, diem, generally,\n",
      "Average loss at step 22000: 3.502014\n",
      "Average loss at step 24000: 3.489656\n",
      "Average loss at step 26000: 3.479728\n",
      "Average loss at step 28000: 3.481400\n",
      "Average loss at step 30000: 3.507036\n",
      "Nearest to new: cdc, resource, nica, kandinsky, boycotts, relocate, universality, perkin,\n",
      "Nearest to more: less, most, very, freddy, highly, wick, dreamers, kippur,\n",
      "Nearest to were: are, was, have, had, flatten, be, is, regularly,\n",
      "Nearest to to: would, not, must, can, sorted, moabites, busta, concerning,\n",
      "Nearest to two: four, one, three, five, six, eight, seven, zero,\n",
      "Nearest to american: british, english, russian, austrian, villa, tat, assign, japanese,\n",
      "Nearest to he: she, it, they, who, there, never, females, then,\n",
      "Nearest to war: tallest, hump, microbiology, fangio, savant, ballads, persecuting, tourist,\n",
      "Nearest to state: city, gatsby, incense, set, slavery, kora, mideast, domesday,\n",
      "Nearest to who: he, they, she, which, and, often, there, never,\n",
      "Nearest to is: was, has, are, being, became, be, precedent, were,\n",
      "Nearest to d: b, obtainable, astride, teutons, exempt, republik, bernadette, ann,\n",
      "Nearest to after: before, during, when, brilliant, lcms, in, gauntlet, into,\n",
      "Nearest to nine: eight, seven, six, five, four, three, zero, two,\n",
      "Nearest to and: or, in, who, but, by, from, laconia, popularization,\n",
      "Nearest to there: it, they, he, often, no, which, generally, who,\n",
      "Average loss at step 32000: 3.504658\n",
      "Average loss at step 34000: 3.488271\n",
      "Average loss at step 36000: 3.454189\n",
      "Average loss at step 38000: 3.305450\n",
      "Average loss at step 40000: 3.427975\n",
      "Nearest to new: boycotts, kandinsky, rs, cdc, unstructured, resource, portmanteaus, rhythms,\n",
      "Nearest to more: less, most, very, wick, highly, freddy, dreamers, ndnis,\n",
      "Nearest to were: are, have, was, had, be, been, flatten, these,\n",
      "Nearest to to: would, will, sorted, could, spalding, slayer, must, can,\n",
      "Nearest to two: three, four, five, seven, six, one, eight, zero,\n",
      "Nearest to american: british, russian, japanese, ocampo, australian, english, villa, german,\n",
      "Nearest to he: she, it, they, there, who, initially, then, this,\n",
      "Nearest to war: tallest, persecuting, microbiology, hump, fangio, primed, allowable, limestones,\n",
      "Nearest to state: city, slavery, penal, gatsby, mideast, incense, kora, government,\n",
      "Nearest to who: which, he, often, she, imo, jong, they, also,\n",
      "Nearest to is: was, are, be, has, being, if, stanbul, motorists,\n",
      "Nearest to d: b, obtainable, UNK, republik, roque, vicente, burlington, magnates,\n",
      "Nearest to after: before, during, when, gauntlet, lcms, into, from, behind,\n",
      "Nearest to nine: eight, six, seven, five, four, zero, three, two,\n",
      "Nearest to and: or, but, coprime, staves, lumbar, dramatist, including, superstars,\n",
      "Nearest to there: it, they, he, often, usually, which, now, still,\n",
      "Average loss at step 42000: 3.431536\n",
      "Average loss at step 44000: 3.455227\n",
      "Average loss at step 46000: 3.448445\n",
      "Average loss at step 48000: 3.349328\n",
      "Average loss at step 50000: 3.381903\n",
      "Nearest to new: victorians, boycotts, charred, cdc, nica, old, lozada, ponte,\n",
      "Nearest to more: less, most, very, highly, rather, freddy, gestalt, wick,\n",
      "Nearest to were: are, was, have, regularly, had, although, flatten, be,\n",
      "Nearest to to: would, must, may, sorted, monotonic, can, axes, essai,\n",
      "Nearest to two: one, three, four, six, five, eight, seven, zero,\n",
      "Nearest to american: russian, british, english, ocampo, japanese, australian, dutch, european,\n",
      "Nearest to he: she, it, they, who, there, this, ruth, hypothesized,\n",
      "Nearest to war: tallest, persecuting, fangio, limestones, allowable, microbiology, hump, ballads,\n",
      "Nearest to state: penal, slavery, city, states, incense, gatsby, elucidation, illinois,\n",
      "Nearest to who: he, which, she, often, there, never, jong, generally,\n",
      "Nearest to is: was, are, has, became, were, although, while, contains,\n",
      "Nearest to d: b, obtainable, republik, vicente, magnates, n, emanates, panhandle,\n",
      "Nearest to after: before, during, when, into, under, from, while, lcms,\n",
      "Nearest to nine: eight, seven, six, four, three, five, zero, two,\n",
      "Nearest to and: or, but, of, in, than, from, including, s,\n",
      "Nearest to there: it, they, he, still, often, now, which, she,\n",
      "Average loss at step 52000: 3.435563\n",
      "Average loss at step 54000: 3.427926\n",
      "Average loss at step 56000: 3.442459\n",
      "Average loss at step 58000: 3.395492\n",
      "Average loss at step 60000: 3.391952\n",
      "Nearest to new: nica, victorians, charred, relocate, ponte, objection, rs, portmanteaus,\n",
      "Nearest to more: less, very, most, highly, rather, longer, larger, gestalt,\n",
      "Nearest to were: are, was, had, have, although, flatten, including, those,\n",
      "Nearest to to: will, would, not, may, busting, must, monotonic, for,\n",
      "Nearest to two: three, four, six, five, one, seven, eight, zero,\n",
      "Nearest to american: russian, british, ocampo, european, english, japanese, surreptitiously, australian,\n",
      "Nearest to he: she, it, they, there, who, then, unfold, diem,\n",
      "Nearest to war: tallest, peerages, savant, ballads, microbiology, primed, geoffroy, vedic,\n",
      "Nearest to state: penal, city, elucidation, states, government, slavery, designation, disabilities,\n",
      "Nearest to who: he, which, she, never, jong, now, stig, what,\n",
      "Nearest to is: was, are, has, be, if, makes, although, dib,\n",
      "Nearest to d: b, h, obtainable, amplify, republik, c, n, phytoplankton,\n",
      "Nearest to after: before, during, when, under, following, while, without, from,\n",
      "Nearest to nine: eight, six, seven, five, four, three, zero, one,\n",
      "Nearest to and: or, but, than, somehow, cluetrain, barracuda, alignment, while,\n",
      "Nearest to there: it, they, he, now, still, usually, she, often,\n",
      "Average loss at step 62000: 3.239022\n",
      "Average loss at step 64000: 3.253472\n",
      "Average loss at step 66000: 3.402347\n",
      "Average loss at step 68000: 3.390003\n",
      "Average loss at step 70000: 3.357543\n",
      "Nearest to new: victorians, portmanteaus, nica, leaf, fictional, garb, allegories, offsets,\n",
      "Nearest to more: less, most, very, highly, larger, rather, quite, longer,\n",
      "Nearest to were: are, have, was, had, be, although, been, being,\n",
      "Nearest to to: would, will, magnetron, must, towards, bundaberg, guis, could,\n",
      "Nearest to two: three, six, four, one, seven, five, zero, eight,\n",
      "Nearest to american: british, russian, english, ocampo, european, japanese, ontological, invasive,\n",
      "Nearest to he: she, it, they, there, who, we, initially, never,\n",
      "Nearest to war: tallest, peerages, savant, primed, fangio, ballads, geoffroy, vedic,\n",
      "Nearest to state: states, city, government, incense, dinoflagellates, designation, penal, elucidation,\n",
      "Nearest to who: never, he, she, jong, now, they, which, stig,\n",
      "Nearest to is: was, has, are, be, became, although, contains, becomes,\n",
      "Nearest to d: b, obtainable, h, republik, f, n, svenska, mandalay,\n",
      "Nearest to after: before, during, when, brilliant, despite, while, until, following,\n",
      "Nearest to nine: eight, six, seven, five, four, zero, three, one,\n",
      "Nearest to and: or, but, which, steaming, while, barracuda, cladogram, racially,\n",
      "Nearest to there: they, it, he, still, generally, often, now, she,\n",
      "Average loss at step 72000: 3.373072\n",
      "Average loss at step 74000: 3.349283\n",
      "Average loss at step 76000: 3.308433\n",
      "Average loss at step 78000: 3.352166\n",
      "Average loss at step 80000: 3.378649\n",
      "Nearest to new: college, charred, victorians, offsets, kandinsky, insignificance, lublin, solicitors,\n",
      "Nearest to more: less, very, most, highly, larger, quite, rather, smaller,\n",
      "Nearest to were: are, was, had, have, although, being, been, flatten,\n",
      "Nearest to to: magnetron, monotonic, would, will, nger, busting, slayer, heiland,\n",
      "Nearest to two: three, four, six, seven, five, one, eight, zero,\n",
      "Nearest to american: british, russian, ocampo, european, english, japanese, italian, atta,\n",
      "Nearest to he: she, it, they, there, who, rao, we, never,\n",
      "Nearest to war: tallest, primed, peerages, microbiology, geoffroy, wars, vie, vedic,\n",
      "Nearest to state: states, city, government, designation, zoltan, ophile, incense, ixian,\n",
      "Nearest to who: he, she, often, never, stig, they, which, imo,\n",
      "Nearest to is: was, has, are, although, be, forelimbs, includes, became,\n",
      "Nearest to d: b, h, f, republik, heb, svenska, obtainable, phytoplankton,\n",
      "Nearest to after: before, during, when, while, despite, from, until, following,\n",
      "Nearest to nine: eight, seven, six, four, five, zero, three, one,\n",
      "Nearest to and: or, including, tilsit, gauntlet, hum, while, but, pyle,\n",
      "Nearest to there: it, they, he, she, still, usually, often, now,\n",
      "Average loss at step 82000: 3.408895\n",
      "Average loss at step 84000: 3.409424\n",
      "Average loss at step 86000: 3.389078\n",
      "Average loss at step 88000: 3.353669\n",
      "Average loss at step 90000: 3.360241\n",
      "Nearest to new: charred, nica, victorians, insignificance, fictional, old, solicitors, separate,\n",
      "Nearest to more: less, most, very, highly, larger, rather, quite, greater,\n",
      "Nearest to were: are, had, was, have, been, although, is, while,\n",
      "Nearest to to: would, monotonic, magnetron, against, sorted, will, could, towards,\n",
      "Nearest to two: three, four, six, five, seven, eight, one, zero,\n",
      "Nearest to american: british, russian, ocampo, japanese, french, european, italian, english,\n",
      "Nearest to he: she, it, they, there, who, eigenvalues, rao, we,\n",
      "Nearest to war: tallest, during, primed, microbiology, savant, wars, commotion, vedic,\n",
      "Nearest to state: city, states, designation, government, sorrow, ophile, ixian, penal,\n",
      "Nearest to who: often, he, she, also, already, which, opposites, jong,\n",
      "Nearest to is: was, has, are, although, requires, be, contains, were,\n",
      "Nearest to d: b, althusser, obtainable, rd, frenchmen, f, h, svenska,\n",
      "Nearest to after: before, during, when, while, despite, until, without, from,\n",
      "Nearest to nine: eight, seven, five, six, four, zero, three, births,\n",
      "Nearest to and: or, while, but, including, although, of, by, however,\n",
      "Nearest to there: they, it, he, still, she, we, now, usually,\n",
      "Average loss at step 92000: 3.396974\n",
      "Average loss at step 94000: 3.260218\n",
      "Average loss at step 96000: 3.358365\n",
      "Average loss at step 98000: 3.242531\n",
      "Average loss at step 100000: 3.359206\n",
      "Nearest to new: nica, victorians, insignificance, fictional, separate, different, special, specific,\n",
      "Nearest to more: less, most, highly, very, quite, larger, rather, greater,\n",
      "Nearest to were: are, have, was, these, been, those, had, although,\n",
      "Nearest to to: will, could, can, would, should, moabites, shall, must,\n",
      "Nearest to two: four, three, five, six, seven, eight, one, zero,\n",
      "Nearest to american: british, canadian, italian, ocampo, japanese, australian, barns, russian,\n",
      "Nearest to he: she, it, they, there, who, we, eigenvalues, eventually,\n",
      "Nearest to war: battle, tallest, masterwork, primed, wars, unleashed, microbiology, fangio,\n",
      "Nearest to state: states, city, ophile, designation, government, tiff, amp, montrealers,\n",
      "Nearest to who: he, she, often, never, which, already, that, generally,\n",
      "Nearest to is: was, has, be, became, are, makes, had, appears,\n",
      "Nearest to d: b, xxxv, republik, unfavourable, sliding, cathal, jeffrey, vicente,\n",
      "Nearest to after: before, during, when, despite, without, while, at, until,\n",
      "Nearest to nine: eight, seven, six, four, five, zero, three, one,\n",
      "Nearest to and: or, but, while, although, excursions, however, when, including,\n",
      "Nearest to there: they, it, he, still, generally, now, we, often,\n"
     ]
    }
   ],
   "source": [
    "num_steps = 100001\n",
    "\n",
    "with tf.Session(graph=graph) as session:\n",
    "  tf.initialize_all_variables().run()\n",
    "  print('Initialized')\n",
    "  average_loss = 0\n",
    "  for step in range(num_steps):\n",
    "    batch_data, batch_labels = generate_batch(\n",
    "      batch_size, num_skips, skip_window)\n",
    "    feed_dict = {train_dataset : batch_data, train_labels : batch_labels}\n",
    "    _, l = session.run([optimizer, loss], feed_dict=feed_dict)\n",
    "    average_loss += l\n",
    "    if step % 2000 == 0:\n",
    "      if step > 0:\n",
    "        average_loss = average_loss / 2000\n",
    "      # The average loss is an estimate of the loss over the last 2000 batches.\n",
    "      print('Average loss at step %d: %f' % (step, average_loss))\n",
    "      average_loss = 0\n",
    "    # note that this is expensive (~20% slowdown if computed every 500 steps)\n",
    "    if step % 10000 == 0:\n",
    "      sim = similarity.eval()\n",
    "      for i in xrange(valid_size):\n",
    "        valid_word = reverse_dictionary[valid_examples[i]]\n",
    "        top_k = 8 # number of nearest neighbors\n",
    "        nearest = (-sim[i, :]).argsort()[1:top_k+1]\n",
    "        log = 'Nearest to %s:' % valid_word\n",
    "        for k in xrange(top_k):\n",
    "          close_word = reverse_dictionary[nearest[k]]\n",
    "          log = '%s %s,' % (log, close_word)\n",
    "        print(log)\n",
    "  final_embeddings = normalized_embeddings.eval()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     }
    },
    "colab_type": "code",
    "collapsed": true,
    "id": "jjJXYA_XzV79"
   },
   "outputs": [],
   "source": [
    "num_points = 400\n",
    "\n",
    "tsne = TSNE(perplexity=30, n_components=2, init='pca', n_iter=5000)\n",
    "two_d_embeddings = tsne.fit_transform(final_embeddings[1:num_points+1, :])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "cellView": "both",
    "colab": {
     "autoexec": {
      "startup": false,
      "wait_interval": 0
     },
     "output_extras": [
      {
       "item_id": 1
      }
     ]
    },
    "colab_type": "code",
    "collapsed": false,
    "executionInfo": {
     "elapsed": 4763,
     "status": "ok",
     "timestamp": 1445965465525,
     "user": {
      "color": "#1FA15D",
      "displayName": "Vincent Vanhoucke",
      "isAnonymous": false,
      "isMe": true,
      "permissionId": "05076109866853157986",
      "photoUrl": "//lh6.googleusercontent.com/-cCJa7dTDcgQ/AAAAAAAAAAI/AAAAAAAACgw/r2EZ_8oYer4/s50-c-k-no/photo.jpg",
      "sessionId": "2f1ffade4c9f20de",
      "userId": "102167687554210253930"
     },
     "user_tz": 420
    },
    "id": "o_e0D_UezcDe",
    "outputId": "df22e4a5-e8ec-4e5e-d384-c6cf37c68c34"
   },
   "outputs": [],
   "source": [
    "def plot(embeddings, labels):\n",
    "  assert embeddings.shape[0] >= len(labels), 'More labels than embeddings'\n",
    "  pylab.figure(figsize=(15,15))  # in inches\n",
    "  for i, label in enumerate(labels):\n",
    "    x, y = embeddings[i,:]\n",
    "    pylab.scatter(x, y)\n",
    "    pylab.annotate(label, xy=(x, y), xytext=(5, 2), textcoords='offset points',\n",
    "                   ha='right', va='bottom')\n",
    "  pylab.show()\n",
    "\n",
    "words = [reverse_dictionary[i] for i in range(1, num_points+1)]\n",
    "plot(two_d_embeddings, words)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "QB5EFrBnpNnc"
   },
   "source": [
    "---\n",
    "\n",
    "Problem\n",
    "-------\n",
    "\n",
    "An alternative to skip-gram is another Word2Vec model called [CBOW](http://arxiv.org/abs/1301.3781) (Continuous Bag of Words). In the CBOW model, instead of predicting a context word from a word vector, you predict a word from the sum of all the word vectors in its context. Implement and evaluate a CBOW model trained on the text8 dataset.\n",
    "\n",
    "---"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "default_view": {},
   "name": "5_word2vec.ipynb",
   "provenance": [],
   "version": "0.3.2",
   "views": {}
  },
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
